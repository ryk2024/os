q1
// LRU
#include <stdio.h>
struct frmnode
{
    int pno, counter;
} frames[20];
int n;
int page_found(int pno)
{
    int fno;
    for (fno = 0; fno < n; fno++)
    {
        if (frames[fno].pno == pno)
            return fno;
    }
    return -1;
}
int get_free_frame()
{
    int fno;
    for (fno = 0; fno < n; fno++)
    {
        if (frames[fno].pno == -1)
            return (fno);
    }
    return (-1);
}
int get_lru_Frame()
{
    int lrufno = 0, fno;
    for (fno = 1; fno < n; fno++)
    {
        if (frames[fno].counter > frames[lrufno].counter)
            lrufno = fno;
    }
    return lrufno;
}
void main()
{
    int p_request[20];
    int size, currtime;
    int page_faults = 0, i, j, fno;
    printf("\nHow many frames:");
    scanf("%d", &n);
    printf("enter size:");
    scanf("%d", &size);

    printf("enter string : ");
    for (int i = 0; i < size; i++)
    {
        scanf("%d", &p_request[i]);
    }
    for (i = 0; i < n; i++)
    {
        frames[i].pno = -1;
    }
    printf("\nPageNo Page Frames Page Fault");
    printf("\n---------------------------------------------------");
    currtime = 0;
    for (i = 0; i < size; i++)
    {
        j = page_found(p_request[i]);
        if (j == -1)
        {
            j = get_free_frame();
            if (j == -1)
                j = get_lru_Frame();
            page_faults++;
            frames[j].pno = p_request[i];
            frames[j].counter = currtime;
            printf("\n%4d\t ", p_request[i]);
            for (fno = 0; fno < n; fno++)
                printf("%4d:%2d", frames[fno].pno, frames[fno].counter);
            printf(" : YES");
        }
        else

        {
            frames[j].counter = currtime;
            printf("\n%4d\t ", p_request[i]);
            for (fno = 0; fno < n; fno++)
                printf("%4d:%2d", frames[fno].pno, frames[fno].counter);
            printf(" : NO");
        }
        currtime++;
    }
    printf("\n------------------------------------------");
    printf("\n Number of Page_Falts=%d", page_faults);
}

q2
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<string.h>
#include<sys/wait.h>
#include<fcntl.h> // open,read(),close() : file related function
void search(char *token2,char *fname,char*token4)
{
char s[80],buffer[40];
int i=0,cnt=0,lc=1,fp;
fp=open(fname,O_RDONLY);
if(fp==-1)
{
printf("\nfile not found");
return;
}
while(read(fp,buffer,1)) //file found
{
if(buffer[0]=='\n')
lc++;
if( buffer[0]=='\n' || buffer[0]=='\t' || buffer[0]==' ' )//word found in line
{
s[i]='\0';
i=0;
if(strstr(s,token4))//pattern found
{
if(strcmp(token2,"f")==0)
{
printf("pattern \"%s\" found in \"%s\" at line no:%d\n",token4,s,lc);
break;
}// F end
if(strcmp(token2,"c")==0)
{
cnt++;
}// C end
if(strcmp(token2,"a")==0)
{
printf("pattern \"%s\" found in \"%s\" at line no:%d\n",token4,s,lc);
}// A end
}//end pattern found
}//if word end
else //char found
{
s[i]=buffer[0];
i++;
}//char found else end
}// end while
if(strcmp(token2,"c")==0)
printf("\ntotal occurances=%d",cnt);
}//search end
int main()
{
char cmd[80],tok1[10],tok2[10],tok3[10],tok4[10];
int n;
while(1)
{
printf("\nMYSHELL $]");
fgets(cmd,80,stdin);
n=sscanf(cmd,"%s%s%s%s",tok1,tok2,tok3,tok4);
switch(n)
{
case 1:
if(fork()==0)
{
execlp(tok1,tok1,NULL);
}
wait(0);
break;
case 2 :
if(fork()==0)
{ execlp(tok1,tok1,tok2,NULL);
}
wait(0);
break;
case 3:
if(fork()==0)
{
execlp(tok1,tok1,tok2,tok3,NULL);
}
wait(0);
break;
case 4 :
if(strcmp(tok1,"search")==0)
{
search(tok2,tok3,tok4);
}
else
{
if(fork()==0)
{
execlp(tok1,tok1,tok2,tok3,tok4,NULL);
}
wait(0);
}
break;
}
}
}
