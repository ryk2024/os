q1
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void make_toks(char *s, char *tok[])
{
    int i = 0;
    char *p;

    p = strtok(s, " ");
    while (p != NULL)
    {
        tok[i++] = p;
        p = strtok(NULL, " ");
    }

    tok[i] = NULL;
}

void typeline(char *fn, char *op)
{
    int fh, i, j, n;
    char c;

    fh = open(fn, O_RDONLY);
    if (fh == -1)
    {
        printf("File %s not found.\n", fn);
        return;
    }

    if (strcmp(op, "a") == 0)
    {
        while (read(fh, &c, 1) > 0)
            printf("%c", c);
        close(fh);
        return;
    }

    n = atoi(op);
    if (n > 0)
    {
        i = 0;
        while (read(fh, &c, 1) > 0)
        {
            printf("%c", c);
            if (c == '\n')
                i++;
            if (i == n)
                break;
        }
    }

    if (n < 0)
    {
        i = 0;
        while (read(fh, &c, 1) > 0)
        {
            if (c == '\n')
                i++;
        }
        lseek(fh, 0, SEEK_SET);
        j = 0;
        while (read(fh, &c, 1) > 0)
        {
            if (c == '\n')
                j++;
            if (j == i + n)
                break;
        }
        while (read(fh, &c, 1) > 0)
        {
            printf("%c", c);
        }
    }

    close(fh);
}

int main()
{
    char buff[80], *args[10];
    int pid;

    while (1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff, 80, stdin);
        buff[strlen(buff) - 1] = '\0';
        make_toks(buff, args);
        if (strcmp(args[0], "typeline") == 0)
            typeline(args[2], args[1]);
        else
        {
            pid = fork();
            if (pid > 0)
                wait();
            else
            {
                if (execvp(args[0], args) == -1)
                    printf("Bad command.\n");
            }
        }
    }

    return 0;
}

q2
#include <stdio.h>
#include <stdlib.h>
void main()
{
    int i, j, n, at[10], bt[10], wt[10], tat[10], start[10], temp, p[10];
    float avtat = 0, avwt = 0;
    printf("Enter Number of Processes : ");
    scanf("%d", &n);
    printf("ENter Arrival Time : ");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &at[i]);
        p[i] = i;
    }
    printf("Enter Burst Time : ");
    for (i = 0; i < n; i++)
        scanf("%d", &bt[i]);
    for (i = 0; i < n - 1; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (at[j] < at[i])
            {
                temp = at[i];
                at[i] = at[j];
                at[j] = temp;

                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;

                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    tat[0] = wt[0] = start[0] = 0;
    for (int i = 1; i < n + 1; i++)
    {
        start[i] = start[i - 1] + bt[i - 1];
        wt[i] = start[i] - at[i];
    }
    for (int i = 0; i < n; i++)
    {
        tat[i] = wt[i] + bt[i];
        avwt += wt[i];
        avtat += tat[i];
    }
    avtat /= n;
    avwt /= n;
    printf("Gantt Chart : \n");
    for (i = 0; i < n; i++)
        printf(" P%d \t", p[i]);
    printf("\n");
    for (i = 0; i <= n; i++)
        printf("%d\t", start[i]);
    printf("\nProcess At  Bt  Wt   TAt\n");
    for (i = 0; i < n; i++)
    {
        printf("P%d\t%d\t%d\t%d\t%d\n", p[i], at[i], bt[i], wt[i], tat[i]);
    }
    printf("AVTAT : %f \n", avtat);
    printf("AVWT : %f ", avwt);
}s