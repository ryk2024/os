q1
#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>

void make_toks(char *s, char *tok[])
{
    int i = 0;
    char *p;

    p = strtok(s, " ");
    while (p != NULL)
    {
        tok[i++] = p;
        p = strtok(NULL, " ");
    }
    tok[i] = NULL;
}

void count(char *fn, char op)
{
    int fh, cc = 0, wc = 0, lc = 0;
    char c;
    fh = open(fn, O_RDONLY);
    if (fh == -1)
    {
        printf("FIle %s not found. \n", fn);
        return;
    }
    while (read(fh, &c, 1) > 0)
    {
        if (c == ' ')
            wc++;
        else if (c == '\n')
        {
            wc++;
            lc++;
        }
        cc++;
    }
    close(fh);

    switch (op)
    {
    case 'c':
        printf("no. of characters:%d", cc);
        break;
    case 'w':
        printf("no. of words: %d\n", wc);
        break;
    case '|':
        printf("no. of lines: %d\n", lc);
        break;
    }
}

int main()
{
    char buff[80], *args[10];
    int pid;

    while (1)
    {
        printf("myshell$");
        fflush(stdin);          
        fgets(buff, 80, stdin); 
        buff[strlen(buff) - 1] = '\0';
        make_toks(buff, args);
        if (strcmp(args[0], "count") == 0)
            count(args[2], args[1][0]);
        else
        {
            pid = fork();
            if (pid > 0)
                wait(NULL);
            else
            {
                if (execvp(args[0], args) == -1)
                    printf("bad command.\n");
            }
        }
    }
    return 0;
}

q2
#include <stdio.h>
typedef struct Process
{
    int pid, bt, at, wt, tat, pri, temp;
} Process;
Process pro[10];
void swap(Process *a, Process *b)
{
    Process temp = *a;
    *a = *b;
    *b = temp;
}
void main()
{
    int i, j, k, n, total_wt = 0, total_tat = 0;
    float avtat = 0, avwt = 0;
    printf("Enter Number Of Processes : ");
    scanf("%d", &n);
    printf("Enter Arrival time : ");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &pro[i].at);
        pro[i].pid = i;
    }
    printf("Enter Burst time : ");
    for (i = 0; i < n; i++)
        scanf("%d", &pro[i].bt);
    printf("Enter Priority Of Processes : ");
    for (i = 0; i < n; i++)
        scanf("%d", &pro[i].pri);

    for (i = 1; i < n - 1; i++)
    {
        for (j = 1; j < n - 1; j++)
        {
            if (pro[j].pri > pro[j + 1].pri)
            {
                swap(&pro[j], &pro[j + 1]);
            }
        }
    }
    pro[0].wt = 0;
    for (i = 1; i < n + 1; i++)
    {
        pro[i].temp = pro[i - 1].temp + pro[i - 1].bt;
        pro[i].wt = pro[i].temp - pro[i].at;
    }
    for (i = 0; i < n; i++)
    {
        pro[i].tat = pro[i].wt + pro[i].bt;
        total_tat += pro[i].tat;
        total_wt += pro[i].wt;
    }
    printf("Gantt Chart : \n");
    for (i = 0; i < n; i++)
        printf(" P%d  ", pro[i].pid);
    printf("\n");
    for (i = 0; i <= n; i++)
        printf("(%d)\t", pro[i].temp);
    avtat = total_tat / n;
    avwt = total_wt / n;

    printf("\nProcess  AT      BT     WT      TAT\n");
    for (i = 0; i < n; i++)
        printf("%d\t%d\t%d\t%d\t%d\n", pro[i].pid, pro[i].at, pro[i].bt, pro[i].wt, pro[i].tat);

    printf("AVTAT : %f\nAVWT : %f", avtat, avwt);
}
