q1
//LRU
#include<stdio.h>

struct frame {
    int pno;
    int counter;

} frames [5];

int ref_str[30];
int np, n, i, j, currtime;

int pagefound(int pno1) {
    int i;

    for (i = 0; i < n; i++)

        if (frames[i].pno == pno1)
            return i;
    return -1;

}//page_found

int get_lru() {
    int min = 0;

    for (i = 0; i < n; i++)

        if (frames[i].counter < frames[min].counter)
            min = i;
    return min;

}

int main() {
    int i, j, pno1, p, page_fault = 0, flag, cnt = 0;;
    float hr, mr;
    printf("\n Enter how many frames: ");
    scanf("%d", & n);
    printf("\n Enter  length of referencestring: ");
    scanf("%d", & np);
    int len = np;
    printf("\n Enter referencestring: ");
    for (i = 0; i < np; i++)
        scanf("%d", & ref_str[i]);

    for (i = 0; i < n; i++) {
        frames[i].pno = -1;
        frames[i].counter = -1;
    }
    printf("\n Page No.\tFrames\t\tPage Fault");
    printf("\n-------------------------------------------------");
    currtime = 1;
    for (p = 0; p < np; p++) {
        flag = 0;
        pno1 = ref_str[p];
        j = pagefound(pno1);
        if (j == -1) {
            page_fault++;

            j = get_lru();

            frames[j].pno = pno1;

            flag = 1;

        }
        frames[j].counter = currtime;
        currtime++;
        printf("\n%5d\t", pno1);
        for (i = 0; i < n; i++)
            printf("  %d ", frames[i]);

        if (flag == 1)
            printf("\t YES");
        else {
            printf("\t NO");
            cnt++;
        }

    }
    printf("\n--------------------------------------------------");
  
    printf("\nNo. of page fault: %d ", page_fault);
    printf("\nNo. of page Hits: %d ", cnt);

    q2

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<string.h>
#include<sys/wait.h>
#include<fcntl.h> // open,read(),close() : file related function
void search(char *token2,char *fname,char*token4)
{
char s[80],buffer[40];
int i=0,cnt=0,lc=1,fp;
fp=open(fname,O_RDONLY);
if(fp==-1)
{
printf("\nfile not found");
return;
}
while(read(fp,buffer,1)) //file found
{
if(buffer[0]=='\n')
lc++;
if( buffer[0]=='\n' || buffer[0]=='\t' || buffer[0]==' ' )//word found in line
{
s[i]='\0';
i=0;
if(strstr(s,token4))//pattern found
{
if(strcmp(token2,"f")==0)
{
printf("pattern \"%s\" found in \"%s\" at line no:%d\n",token4,s,lc);
break;
}// F end
if(strcmp(token2,"c")==0)
{
cnt++;
}// C end
if(strcmp(token2,"a")==0)
{
printf("pattern \"%s\" found in \"%s\" at line no:%d\n",token4,s,lc);
}// A end
}//end pattern found
}//if word end
else //char found
{
s[i]=buffer[0];
i++;
}//char found else end
}// end while
if(strcmp(token2,"c")==0)
printf("\ntotal occurances=%d",cnt);
}//search end
int main()
{
char cmd[80],tok1[10],tok2[10],tok3[10],tok4[10];
int n;
while(1)
{
printf("\nMYSHELL $]");
fgets(cmd,80,stdin);
n=sscanf(cmd,"%s%s%s%s",tok1,tok2,tok3,tok4);
switch(n)
{
case 1:
if(fork()==0)
{
execlp(tok1,tok1,NULL);
}
wait(0);
break;
case 2 :
if(fork()==0)
{ execlp(tok1,tok1,tok2,NULL);
}
wait(0);
break;
case 3:
if(fork()==0)
{
execlp(tok1,tok1,tok2,tok3,NULL);
}
wait(0);
break;
case 4 :
if(strcmp(tok1,"search")==0)
{
search(tok2,tok3,tok4);
}
else
{
if(fork()==0)
{
execlp(tok1,tok1,tok2,tok3,tok4,NULL);
}
wait(0);
}
break;
}
}
}



q2
